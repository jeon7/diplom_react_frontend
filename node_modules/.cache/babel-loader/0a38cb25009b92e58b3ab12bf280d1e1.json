{"ast":null,"code":"var _jsxFileName = \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/src/containers/notes/NoteListContainer.js\";\nimport React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NoteList from '../../components/notes/NoteList';\nimport { listNotes } from '../../modules/notes';\n\nconst NoteListContainer = ({\n  location\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    notes,\n    loading,\n    user\n  }) => ({\n    notes: notes.notes,\n    error: notes.error,\n    loading: loading['notes/LIST_NOTES'],\n    user: user.user\n  })),\n        notes = _useSelector.notes,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user;\n\n  useEffect(() => {\n    const _qs$parse = qs.parse(location.search, {\n      ignoreQueryPrefix: true\n    }),\n          tag = _qs$parse.tag,\n          username = _qs$parse.username,\n          page = _qs$parse.page,\n          bookmark = _qs$parse.bookmark,\n          id = _qs$parse.id;\n\n    dispatch(listNotes({\n      tag,\n      username,\n      page,\n      bookmark,\n      id\n    }));\n  }, [dispatch, location.search]);\n  return React.createElement(NoteList, {\n    loading: loading,\n    error: error,\n    notes: notes,\n    showWriteButton: user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(NoteListContainer);","map":{"version":3,"sources":["/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/src/containers/notes/NoteListContainer.js"],"names":["React","useEffect","qs","withRouter","useDispatch","useSelector","NoteList","listNotes","NoteListContainer","location","dispatch","notes","loading","user","error","parse","search","ignoreQueryPrefix","tag","username","page","bookmark","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC1C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAD0C,uBAEFC,WAAW,CACjD,CAAC;AAAEM,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,GAAD,MAA+B;AAC7BF,IAAAA,KAAK,EAAEA,KAAK,CAACA,KADgB;AAE7BG,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAFgB;AAG7BF,IAAAA,OAAO,EAAEA,OAAO,CAAC,kBAAD,CAHa;AAI7BC,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAJkB,GAA/B,CADiD,CAFT;AAAA,QAElCF,KAFkC,gBAElCA,KAFkC;AAAA,QAE3BG,KAF2B,gBAE3BA,KAF2B;AAAA,QAEpBF,OAFoB,gBAEpBA,OAFoB;AAAA,QAEXC,IAFW,gBAEXA,IAFW;;AAU1CZ,EAAAA,SAAS,CAAC,MAAM;AAAA,sBACgCC,EAAE,CAACa,KAAH,CAASN,QAAQ,CAACO,MAAlB,EAA0B;AACtEC,MAAAA,iBAAiB,EAAE;AADmD,KAA1B,CADhC;AAAA,UACNC,GADM,aACNA,GADM;AAAA,UACDC,QADC,aACDA,QADC;AAAA,UACSC,IADT,aACSA,IADT;AAAA,UACeC,QADf,aACeA,QADf;AAAA,UACyBC,EADzB,aACyBA,EADzB;;AAIdZ,IAAAA,QAAQ,CAACH,SAAS,CAAC;AAAEW,MAAAA,GAAF;AAAOC,MAAAA,QAAP;AAAiBC,MAAAA,IAAjB;AAAuBC,MAAAA,QAAvB;AAAiCC,MAAAA;AAAjC,KAAD,CAAV,CAAR;AACD,GALQ,EAKN,CAACZ,QAAD,EAAWD,QAAQ,CAACO,MAApB,CALM,CAAT;AAOA,SACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAEJ,OADX;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,KAAK,EAAEH,KAHT;AAIE,IAAA,eAAe,EAAEE,IAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAzBD;;AA2BA,eAAeV,UAAU,CAACK,iBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NoteList from '../../components/notes/NoteList';\nimport { listNotes } from '../../modules/notes';\n\nconst NoteListContainer = ({ location }) => {\n  const dispatch = useDispatch();\n  const { notes, error, loading, user } = useSelector(\n    ({ notes, loading, user }) => ({\n      notes: notes.notes,\n      error: notes.error,\n      loading: loading['notes/LIST_NOTES'],\n      user: user.user,\n    }),\n  );\n  useEffect(() => {\n    const { tag, username, page, bookmark, id } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listNotes({ tag, username, page, bookmark, id }));\n  }, [dispatch, location.search]);\n\n  return (\n    <NoteList\n      loading={loading}\n      error={error}\n      notes={notes}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(NoteListContainer);\n"]},"metadata":{},"sourceType":"module"}