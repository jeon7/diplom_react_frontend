{"ast":null,"code":"import _defineProperty from \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as notesAPI from '../lib/api/notes';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('notes/LIST_NOTES'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_NOTES = _createRequestActionT2[0],\n      LIST_NOTES_SUCCESS = _createRequestActionT2[1],\n      LIST_NOTES_FAILURE = _createRequestActionT2[2];\n\nexport const listNotes = createAction(LIST_NOTES, ({\n  tag,\n  username,\n  page,\n  bookmark,\n  id\n}) => ({\n  tag,\n  username,\n  page,\n  bookmark,\n  id\n}));\nconst listNotesSaga = createRequestSaga(LIST_NOTES, notesAPI.listNotes);\nexport function* notesSaga() {\n  yield takeLatest(LIST_NOTES, listNotesSaga);\n}\nconst initialState = {\n  notes: null,\n  error: null,\n  lastPage: 1\n};\nconst notes = handleActions({\n  [LIST_NOTES_SUCCESS]: (state, {\n    payload: notes,\n    meta: response\n  }) => _objectSpread({}, state, {\n    notes,\n    lastPage: parseInt(response.headers['last-page'], 10) // 문자열을 숫자로 변환\n\n  }),\n  [LIST_NOTES_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default notes;","map":{"version":3,"sources":["/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/src/modules/notes.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","notesAPI","takeLatest","LIST_NOTES","LIST_NOTES_SUCCESS","LIST_NOTES_FAILURE","listNotes","tag","username","page","bookmark","id","listNotesSaga","notesSaga","initialState","notes","error","lastPage","state","payload","meta","response","parseInt","headers"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;8BAMIF,wBAAwB,CAAC,kBAAD,C;;MAH1BG,U;MACAC,kB;MACAC,kB;;AAIF,OAAO,MAAMC,SAAS,GAAGT,YAAY,CACnCM,UADmC,EAEnC,CAAC;AAAEI,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,IAAjB;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA;AAAjC,CAAD,MAA4C;AAAEJ,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,IAAjB;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA;AAAjC,CAA5C,CAFmC,CAA9B;AAKP,MAAMC,aAAa,GAAGb,iBAAiB,CAACI,UAAD,EAAaF,QAAQ,CAACK,SAAtB,CAAvC;AAEA,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAMX,UAAU,CAACC,UAAD,EAAaS,aAAb,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,MAAMF,KAAK,GAAGjB,aAAa,CACzB;AACE,GAACM,kBAAD,GAAsB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ,KAAX;AAAkBK,IAAAA,IAAI,EAAEC;AAAxB,GAAR,uBACjBH,KADiB;AAEpBH,IAAAA,KAFoB;AAGpBE,IAAAA,QAAQ,EAAEK,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,WAAjB,CAAD,EAAgC,EAAhC,CAHE,CAGmC;;AAHnC,IADxB;AAME,GAAClB,kBAAD,GAAsB,CAACa,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB;AANxB,CADyB,EAYzBF,YAZyB,CAA3B;AAeA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as notesAPI from '../lib/api/notes';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  LIST_NOTES,\n  LIST_NOTES_SUCCESS,\n  LIST_NOTES_FAILURE,\n] = createRequestActionTypes('notes/LIST_NOTES');\n\n\nexport const listNotes = createAction(\n  LIST_NOTES,\n  ({ tag, username, page, bookmark, id }) => ({ tag, username, page, bookmark, id }),\n);\n\nconst listNotesSaga = createRequestSaga(LIST_NOTES, notesAPI.listNotes);\n\nexport function* notesSaga() {\n  yield takeLatest(LIST_NOTES, listNotesSaga);\n}\n\nconst initialState = {\n  notes: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst notes = handleActions(\n  {\n    [LIST_NOTES_SUCCESS]: (state, { payload: notes, meta: response }) => ({\n      ...state,\n      notes,\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\n    }),\n    [LIST_NOTES_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default notes;\n"]},"metadata":{},"sourceType":"module"}