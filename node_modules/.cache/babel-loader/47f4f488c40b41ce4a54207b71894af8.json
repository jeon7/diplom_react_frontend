{"ast":null,"code":"import _defineProperty from \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as notesAPI from '../lib/api/notes';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst _createRequestActionT = createRequestActionTypes('write/WRITE_NOTE'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      WRITE_NOTE = _createRequestActionT2[0],\n      WRITE_NOTE_SUCCESS = _createRequestActionT2[1],\n      WRITE_NOTE_FAILURE = _createRequestActionT2[2]; // 포스트 작성\n\n\nconst SET_ORIGINAL_NOTE = 'write/SET_ORIGINAL_NOTE';\n\nconst _createRequestActionT3 = createRequestActionTypes('write/UPDATE_NOTE'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      UPDATE_NOTE = _createRequestActionT4[0],\n      UPDATE_NOTE_SUCCESS = _createRequestActionT4[1],\n      UPDATE_NOTE_FAILURE = _createRequestActionT4[2]; // 포스트 수정\n\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writeNote = createAction(WRITE_NOTE, ({\n  title,\n  standardPortion,\n  ingredients,\n  memo,\n  tags\n}) => ({\n  title,\n  standardPortion,\n  ingredients,\n  memo,\n  tags\n}));\nexport const setOriginalNote = createAction(SET_ORIGINAL_NOTE, note => note);\nexport const updateNote = createAction(UPDATE_NOTE, ({\n  id,\n  title,\n  standardPortion,\n  ingredients,\n  memo,\n  tags\n}) => ({\n  id,\n  title,\n  standardPortion,\n  ingredients,\n  memo,\n  tags\n})); // saga 생성\n\nconst writeNoteSaga = createRequestSaga(WRITE_NOTE, notesAPI.writeNote);\nconst updateNoteSaga = createRequestSaga(UPDATE_NOTE, notesAPI.updateNote);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_NOTE, writeNoteSaga);\n  yield takeLatest(UPDATE_NOTE, updateNoteSaga);\n}\nconst initialState = {\n  title: '',\n  standardPortion: null,\n  ingredients: '',\n  memo: '',\n  tags: [],\n  note: null,\n  noteError: null,\n  originalNoteId: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기상태로 바뀜\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value // 특정 key 값을 업데이트\n\n  }),\n  [WRITE_NOTE]: state => _objectSpread({}, state, {\n    // note와 noteError를 초기화\n    note: null,\n    noteError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_NOTE_SUCCESS]: (state, {\n    payload: note\n  }) => _objectSpread({}, state, {\n    note\n  }),\n  // 포스트 작성 실패\n  [WRITE_NOTE_FAILURE]: (state, {\n    payload: noteError\n  }) => _objectSpread({}, state, {\n    noteError\n  }),\n  // 포스트 수정 성공\n  [UPDATE_NOTE_SUCCESS]: (state, {\n    payload: note\n  }) => _objectSpread({}, state, {\n    note\n  }),\n  // 포스트 수정 실패\n  [UPDATE_NOTE_FAILURE]: (state, {\n    payload: noteError\n  }) => _objectSpread({}, state, {\n    noteError\n  }),\n  [SET_ORIGINAL_NOTE]: (state, {\n    payload: note\n  }) => _objectSpread({}, state, {\n    title: note.title,\n    standardPortion: note.standardPortion,\n    ingredients: note.ingredients,\n    memo: note.memo,\n    tags: note.tags,\n    originalNoteId: note._id\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","notesAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_NOTE","WRITE_NOTE_SUCCESS","WRITE_NOTE_FAILURE","SET_ORIGINAL_NOTE","UPDATE_NOTE","UPDATE_NOTE_SUCCESS","UPDATE_NOTE_FAILURE","initialize","changeField","key","value","writeNote","title","standardPortion","ingredients","memo","tags","setOriginalNote","note","updateNote","id","writeNoteSaga","updateNoteSaga","writeSaga","initialState","noteError","originalNoteId","write","state","payload","_id"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,UAAU,GAAG,kBAAnB,C,CAAuC;;AACvC,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;8BAMvCJ,wBAAwB,CAAC,kBAAD,C;;MAH1BK,U;MACAC,kB;MACAC,kB,8BACgD;;;AAElD,MAAMC,iBAAiB,GAAG,yBAA1B;;+BAMIR,wBAAwB,CAAC,mBAAD,C;;MAH1BS,W;MACAC,mB;MACAC,mB,8BACiD;;;AAEnD,OAAO,MAAMC,UAAU,GAAGf,YAAY,CAACM,UAAD,CAA/B;AACP,OAAO,MAAMU,WAAW,GAAGhB,YAAY,CAACO,YAAD,EAAe,CAAC;AAAEU,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,MAAqB;AACzED,EAAAA,GADyE;AAEzEC,EAAAA;AAFyE,CAArB,CAAf,CAAhC;AAIP,OAAO,MAAMC,SAAS,GAAGnB,YAAY,CAACQ,UAAD,EACnC,CAAC;AAAEY,EAAAA,KAAF;AAASC,EAAAA,eAAT;AAA0BC,EAAAA,WAA1B;AAAuCC,EAAAA,IAAvC;AAA6CC,EAAAA;AAA7C,CAAD,MAA0D;AACxDJ,EAAAA,KADwD;AAExDC,EAAAA,eAFwD;AAGxDC,EAAAA,WAHwD;AAIxDC,EAAAA,IAJwD;AAKxDC,EAAAA;AALwD,CAA1D,CADmC,CAA9B;AAQP,OAAO,MAAMC,eAAe,GAAGzB,YAAY,CAACW,iBAAD,EAAoBe,IAAI,IAAIA,IAA5B,CAApC;AACP,OAAO,MAAMC,UAAU,GAAG3B,YAAY,CAACY,WAAD,EACpC,CAAC;AAAEgB,EAAAA,EAAF;AAAMR,EAAAA,KAAN;AAAaC,EAAAA,eAAb;AAA8BC,EAAAA,WAA9B;AAA2CC,EAAAA,IAA3C;AAAiDC,EAAAA;AAAjD,CAAD,MAA8D;AAC5DI,EAAAA,EAD4D;AAE5DR,EAAAA,KAF4D;AAG5DC,EAAAA,eAH4D;AAI5DC,EAAAA,WAJ4D;AAK5DC,EAAAA,IAL4D;AAM5DC,EAAAA;AAN4D,CAA9D,CADoC,CAA/B,C,CAUP;;AACA,MAAMK,aAAa,GAAG3B,iBAAiB,CAACM,UAAD,EAAaJ,QAAQ,CAACe,SAAtB,CAAvC;AACA,MAAMW,cAAc,GAAG5B,iBAAiB,CAACU,WAAD,EAAcR,QAAQ,CAACuB,UAAvB,CAAxC;AACA,OAAO,UAAUI,SAAV,GAAsB;AAC3B,QAAM1B,UAAU,CAACG,UAAD,EAAaqB,aAAb,CAAhB;AACA,QAAMxB,UAAU,CAACO,WAAD,EAAckB,cAAd,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBZ,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,eAAe,EAAE,IAFE;AAGnBC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,IAAI,EAAE,EAJa;AAKnBC,EAAAA,IAAI,EAAE,EALa;AAMnBE,EAAAA,IAAI,EAAE,IANa;AAOnBO,EAAAA,SAAS,EAAE,IAPQ;AAQnBC,EAAAA,cAAc,EAAE;AARG,CAArB;AAWA,MAAMC,KAAK,GAAGlC,aAAa,CACzB;AACE,GAACK,UAAD,GAAc8B,KAAK,IAAIJ,YADzB;AACuC;AACrC,GAACzB,YAAD,GAAgB,CAAC6B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAE;AAAEpB,MAAAA,GAAF;AAAOC,MAAAA;AAAP;AAAX,GAAR,uBACXkB,KADW;AAEd,KAACnB,GAAD,GAAOC,KAFO,CAEA;;AAFA,IAFlB;AAME,GAACV,UAAD,GAAc4B,KAAK,sBACdA,KADc;AAEjB;AACAV,IAAAA,IAAI,EAAE,IAHW;AAIjBO,IAAAA,SAAS,EAAE;AAJM,IANrB;AAYE;AACA,GAACxB,kBAAD,GAAsB,CAAC2B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEX;AAAX,GAAR,uBACjBU,KADiB;AAEpBV,IAAAA;AAFoB,IAbxB;AAiBE;AACA,GAAChB,kBAAD,GAAsB,CAAC0B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,uBACjBG,KADiB;AAEpBH,IAAAA;AAFoB,IAlBxB;AAsBE;AACA,GAACpB,mBAAD,GAAuB,CAACuB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEX;AAAX,GAAR,uBAClBU,KADkB;AAErBV,IAAAA;AAFqB,IAvBzB;AA2BE;AACA,GAACZ,mBAAD,GAAuB,CAACsB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAR,uBAClBG,KADkB;AAErBH,IAAAA;AAFqB,IA5BzB;AAgCE,GAACtB,iBAAD,GAAqB,CAACyB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEX;AAAX,GAAR,uBAChBU,KADgB;AAEnBhB,IAAAA,KAAK,EAAEM,IAAI,CAACN,KAFO;AAGnBC,IAAAA,eAAe,EAAEK,IAAI,CAACL,eAHH;AAInBC,IAAAA,WAAW,EAAEI,IAAI,CAACJ,WAJC;AAKnBC,IAAAA,IAAI,EAAEG,IAAI,CAACH,IALQ;AAMnBC,IAAAA,IAAI,EAAEE,IAAI,CAACF,IANQ;AAOnBU,IAAAA,cAAc,EAAER,IAAI,CAACY;AAPF;AAhCvB,CADyB,EA2CzBN,YA3CyB,CAA3B;AA8CA,eAAeG,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as notesAPI from '../lib/api/notes';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [\n  WRITE_NOTE,\n  WRITE_NOTE_SUCCESS,\n  WRITE_NOTE_FAILURE,\n] = createRequestActionTypes('write/WRITE_NOTE'); // 포스트 작성\n\nconst SET_ORIGINAL_NOTE = 'write/SET_ORIGINAL_NOTE';\n\nconst [\n  UPDATE_NOTE,\n  UPDATE_NOTE_SUCCESS,\n  UPDATE_NOTE_FAILURE,\n] = createRequestActionTypes('write/UPDATE_NOTE'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writeNote = createAction(WRITE_NOTE,\n  ({ title, standardPortion, ingredients, memo, tags }) => ({\n    title,\n    standardPortion,\n    ingredients,\n    memo,\n    tags,\n  }));\nexport const setOriginalNote = createAction(SET_ORIGINAL_NOTE, note => note);\nexport const updateNote = createAction(UPDATE_NOTE,\n  ({ id, title, standardPortion, ingredients, memo, tags }) => ({\n    id,\n    title,\n    standardPortion,\n    ingredients,\n    memo,\n    tags,\n  }));\n\n// saga 생성\nconst writeNoteSaga = createRequestSaga(WRITE_NOTE, notesAPI.writeNote);\nconst updateNoteSaga = createRequestSaga(UPDATE_NOTE, notesAPI.updateNote);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_NOTE, writeNoteSaga);\n  yield takeLatest(UPDATE_NOTE, updateNoteSaga);\n}\n\nconst initialState = {\n  title: '',\n  standardPortion: null,\n  ingredients: '',\n  memo: '',\n  tags: [],\n  note: null,\n  noteError: null,\n  originalNoteId: null\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_NOTE]: state => ({\n      ...state,\n      // note와 noteError를 초기화\n      note: null,\n      noteError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_NOTE_SUCCESS]: (state, { payload: note }) => ({\n      ...state,\n      note,\n    }),\n    // 포스트 작성 실패\n    [WRITE_NOTE_FAILURE]: (state, { payload: noteError }) => ({\n      ...state,\n      noteError,\n    }),\n    // 포스트 수정 성공\n    [UPDATE_NOTE_SUCCESS]: (state, { payload: note }) => ({\n      ...state,\n      note,\n    }),\n    // 포스트 수정 실패\n    [UPDATE_NOTE_FAILURE]: (state, { payload: noteError }) => ({\n      ...state,\n      noteError,\n    }),\n    [SET_ORIGINAL_NOTE]: (state, { payload: note }) => ({\n      ...state,\n      title: note.title,\n      standardPortion: note.standardPortion,\n      ingredients: note.ingredients,\n      memo: note.memo,\n      tags: note.tags,\n      originalNoteId: note._id\n    })\n  },\n  initialState,\n);\n\nexport default write;\n"]},"metadata":{},"sourceType":"module"}