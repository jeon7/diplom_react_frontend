{"ast":null,"code":"import _defineProperty from \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as notesAPI from '../lib/api/notes';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('note/READ_NOTE'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      READ_NOTE = _createRequestActionT2[0],\n      READ_NOTE_SUCCESS = _createRequestActionT2[1],\n      READ_NOTE_FAILURE = _createRequestActionT2[2];\n\nconst UNLOAD_NOTE = 'note/UNLOAD_NOTE'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readNote = createAction(READ_NOTE, id => id);\nexport const unloadNote = createAction(UNLOAD_NOTE);\nconst readNoteSaga = createRequestSaga(READ_NOTE, notesAPI.readNote);\nexport function* noteSaga() {\n  yield takeLatest(READ_NOTE, readNoteSaga);\n}\nconst initialState = {\n  note: null,\n  error: null\n};\nconst note = handleActions({\n  [READ_NOTE_SUCCESS]: (state, {\n    payload: note\n  }) => _objectSpread({}, state, {\n    note\n  }),\n  [READ_NOTE_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  }),\n  [UNLOAD_NOTE]: () => initialState\n}, initialState);\nexport default note;","map":{"version":3,"sources":["/Users/GK/Documents/WEB/diplom/eco_kitchen/react_frontend/src/modules/note.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","notesAPI","takeLatest","READ_NOTE","READ_NOTE_SUCCESS","READ_NOTE_FAILURE","UNLOAD_NOTE","readNote","id","unloadNote","readNoteSaga","noteSaga","initialState","note","error","state","payload"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;8BAMIF,wBAAwB,CAAC,gBAAD,C;;MAH1BG,S;MACAC,iB;MACAC,iB;;AAEF,MAAMC,WAAW,GAAG,kBAApB,C,CAAwC;;AAExC,OAAO,MAAMC,QAAQ,GAAGV,YAAY,CAACM,SAAD,EAAYK,EAAE,IAAIA,EAAlB,CAA7B;AACP,OAAO,MAAMC,UAAU,GAAGZ,YAAY,CAACS,WAAD,CAA/B;AAEP,MAAMI,YAAY,GAAGX,iBAAiB,CAACI,SAAD,EAAYF,QAAQ,CAACM,QAArB,CAAtC;AACA,OAAO,UAAUI,QAAV,GAAqB;AAC1B,QAAMT,UAAU,CAACC,SAAD,EAAYO,YAAZ,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,MAAMD,IAAI,GAAGf,aAAa,CACxB;AACE,GAACM,iBAAD,GAAqB,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBAChBE,KADgB;AAEnBF,IAAAA;AAFmB,IADvB;AAKE,GAACR,iBAAD,GAAqB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,uBAChBC,KADgB;AAEnBD,IAAAA;AAFmB,IALvB;AASE,GAACR,WAAD,GAAe,MAAMM;AATvB,CADwB,EAYxBA,YAZwB,CAA1B;AAeA,eAAeC,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as notesAPI from '../lib/api/notes';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_NOTE,\n  READ_NOTE_SUCCESS,\n  READ_NOTE_FAILURE,\n] = createRequestActionTypes('note/READ_NOTE');\nconst UNLOAD_NOTE = 'note/UNLOAD_NOTE'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readNote = createAction(READ_NOTE, id => id);\nexport const unloadNote = createAction(UNLOAD_NOTE);\n\nconst readNoteSaga = createRequestSaga(READ_NOTE, notesAPI.readNote);\nexport function* noteSaga() {\n  yield takeLatest(READ_NOTE, readNoteSaga);\n}\n\nconst initialState = {\n  note: null,\n  error: null,\n};\n\nconst note = handleActions(\n  {\n    [READ_NOTE_SUCCESS]: (state, { payload: note }) => ({\n      ...state,\n      note,\n    }),\n    [READ_NOTE_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_NOTE]: () => initialState,\n  },\n  initialState,\n);\n\nexport default note;\n"]},"metadata":{},"sourceType":"module"}